import concurrent.futures
import subprocess
import re

# Список одиночных IP-адресов для проверки
ip_list = [
    "155.133.224.21",
"37.27.120.224",
"147.75.193.65",
"155.133.238.194",
"155.133.244.52",
"155.133.225.18",
"23.251.100.186",
"155.133.249.163",
"146.66.152.37",
"103.10.125.155",
"68.169.42.221",
"148.72.174.135",
"151.106.18.227",
"37.27.120.222",
"103.10.125.146",
"147.75.193.63",
"155.133.244.36",
"155.133.246.50",
"148.72.168.4",
"104.198.101.253",
"52.40.240.176",
"52.42.44.79",
"177.54.152.31",
"35.247.197.244",
"35.199.73.98",
"52.67.92.122",
"52.67.31.204",
"61.4.123.23",
"104.155.233.79",
"104.199.182.138",
"72.5.161.228",
"35.185.189.243",
"34.126.123.124",
"52.69.157.152",
"34.84.103.231",
"34.146.173.142",
"34.85.61.180",
"52.197.77.217",
"15.185.47.239",
"15.185.93.241",
"27.50.72.162",
"35.244.68.47",
"35.201.19.135",
"52.63.136.88",
"13.54.193.120",
"217.147.89.101",
"64.95.100.189",
"34.140.130.182",
"35.241.147.23",
"34.76.163.97",
"52.58.81.34",
"52.59.121.244",
"107.150.147.67",
"34.75.67.95",
"104.196.209.149",
"104.196.8.33",
"52.6.64.33",
"52.86.226.95",
"148.72.171.218",
"63.251.239.123",
"130.211.193.234",
"34.70.146.63",
"104.197.136.10",
"104.197.42.178",
"107.182.233.168",
"104.198.102.93",
"155.133.224.20",
"134.119.207.105",
"103.10.125.147",
"155.133.238.178",
"146.66.152.41",
"103.10.125.154",
"88.202.177.29",
"155.133.225.19",
"23.251.100.126",
"146.66.152.42",
"108.181.66.207",
"155.133.249.179",
"108.181.60.109",
"23.109.51.108",
"146.66.152.36",
"88.202.177.72",
"129.227.0.0",
"203.195.123.0",
"172.107.213.48",
"172.106.0.0",
"103.23.210.0",
"172.107.213.0",
"203.195.120.0",
"128.1.95.0",
"103.10.124.117",
"103.10.124.120",
"188.42.120.180",
"103.28.54.182",
"103.28.54.183",
"45.121.184.24",
"45.121.184.6",
"129.227.83.138",
"129.227.67.234",
"129.227.83.130",
"129.227.67.222",
"129.227.83.178",
"129.227.70.110",
"129.227.70.122",
"129.227.70.114",
"129.227.69.198",
"103.126.139.58",
"129.227.70.90",
"129.227.70.66",
"129.227.83.166",
"129.227.83.158",
"129.227.70.106",
"129.227.67.86",
"129.227.70.34",
"15.185.0.0",
"23.109.6.52",
"23.109.7.188",
"23.109.6.76",
"172.255.8.0",
"23.109.0.0",
"107.6.160.0",
"172.241.64.0",
"46.23.72.0",
"72.251.246.68",
"155.133.248.41",
"146.0.240.0",
"37.61.217.92",
"85.195.92.46",
"85.195.75.196",
"85.195.114.188",
"85.195.105.208",
"146.0.232.100",
"146.0.225.72",
"85.195.96.245",
"146.0.230.128",
"146.0.234.190",
"146.0.234.86",
"85.195.93.156",
"85.195.96.251",
"85.195.76.94",
"85.195.120.134",
"146.0.237.243",
"85.195.64.0",
"146.0.238.238",
"37.61.216.189",
"85.195.95.39",
"85.195.96.137",
"37.61.213.213",
"85.195.83.65",
"85.195.107.5",
"85.195.107.1",
"85.195.75.221",
"85.195.96.37",
"188.42.40.0",
"188.42.168.0",
"188.42.190.100",
"188.42.174.114",
"34.214.99.199",
"155.133.248.37",
"162.254.199.180",
"155.133.253.55",
"185.25.183.163",
"155.133.255.99",
"162.254.197.37",
"155.133.227.36",
"103.28.54.163",
"188.42.190.28",
"205.196.6.211",
"162.254.198.102",
"155.133.252.85",
"162.213.192.66",
"162.254.192.72",
"162.254.195.74",
"162.254.196.82",
"155.133.244.51",
"173.237.51.204",
"68.169.42.222",
"155.133.246.39",
"162.254.193.99",
"185.25.182.51",
"103.10.124.118",
"45.121.184.26",
"3.224.21.15",
"54.85.5.50",
"3.224.109.90",
"54.187.196.209",
"3.210.214.59",
"54.204.217.181",
"52.3.113.244",
"92.122.104.90",
"54.204.81.222",
"44.208.75.157",
"54.158.38.102",
"52.1.23.179",
"54.208.156.59",
"54.172.223.41",
"54.173.3.142",
"35.174.26.88",
"3.210.0.192",
"3.213.227.132",
"54.234.104.148",
"54.160.183.173",
"44.194.253.95",
"54.156.58.114",
"44.205.156.18",
"44.194.244.61",
"35.169.9.44",
"52.72.250.83",
"34.224.231.66",
"52.54.241.57",
"129.227.0.0",
"203.195.123.0",
"172.107.213.48",
"172.106.0.0",
"103.23.210.0",
"128.1.0.0",
"172.107.213.0",
"203.195.120.0",
"128.1.95.0",
"134.119.192.0",
"151.106.49.86",
"151.106.58.217",
"151.106.48.0",
"151.0.0.0",
"134.119.0.0",
"92.42.111.123",
"134.119.220.105",
"151.106.63.227",
"151.106.15.89",
"15.185.0.0",
"170.66.152.41",
"170.66.152.36",
"173.244.194.11",
"88.202.177.148",
"88.150.220.83",
"162.254.196.85",
"146.0.240.0",
"85.195.64.0",
"188.42.40.0",
"188.42.168.0",
"162.254.199.167",
"155.133.226.72",
"155.133.227.35",
"37.27.120.223",
"103.28.54.184",
"205.196.6.212",
"103.10.124.119",
"45.121.184.25",
"146.66.155.72",
"155.133.230.100",
"74.201.228.148",
"162.254.192.73",
"162.254.195.72",
"162.254.196.70",
"162.254.193.98",
"185.25.182.19",
"155.133.253.38",
"155.133.246.40",
"23.109.7.252",
"174.127.114.92",
"72.26.219.137",
"108.181.240.179",
"95.154.228.22",
"82.163.76.59",
"174.127.114.98",
"174.127.114.84",
"31.204.158.77",
"209.239.121.82",
"104.197.17.180",
"104.196.43.45",
"35.196.104.104",
"146.148.120.92",
"104.155.80.155",
"130.211.51.110",
"69.88.135.37",
"35.185.189.104",
"161.202.72.179",
"104.198.82.36",
"104.198.82.65",
"104.198.88.214",
"35.197.166.13",
"52.62.160.212",
"37.27.120.221",
"134.119.189.131",
"88.202.177.38",
"108.61.228.25",
"108.181.126.39",
"35.199.89.186",
"35.195.229.190",
"35.202.185.68",
"35.205.98.212",
"35.205.188.22",
"34.76.193.5",
"35.239.243.56",
"34.76.128.217",
"35.226.131.232",
"35.239.142.90",
"35.188.165.134",
"35.204.156.92",
"35.202.234.125",
"88.202.177.50",
"34.76.47.58",
"35.205.231.81",
"35.224.125.95",
"35.238.60.108",
"35.241.227.254",
"35.204.191.198",
"35.224.235.30",
"34.76.80.212",
"35.238.133.109",
"35.193.70.94",
"35.195.74.169",
"104.154.83.89",
"35.224.96.205",
"35.195.119.80",
"104.198.232.164",
"35.202.129.5",
"35.188.41.108",
"35.226.184.88",
"35.224.15.209",
"35.222.112.51",
"35.204.166.7",
"35.239.36.215",
"34.76.187.82",
"35.187.66.213",
"35.241.193.244",
"34.76.202.175",
"104.198.169.152",
"35.193.240.239",
"35.224.162.74",
"35.238.255.94",
"35.184.26.244",
"35.202.70.142",
"35.204.143.240",
"35.222.186.111",
"35.233.53.40",
"34.76.190.62",
    # Добавьте другие IP-адреса здесь
]

temp_file = "temp_result.txt"
sorted_file = "sorted_result.txt"
output_file = "ping_results.txt"
high_ping_file = "high_ping.txt"

def ping(ip):
    try:
        # Выполнение команды ping и получение времени отклика
        result = subprocess.run(['ping', '-n', '1', ip], capture_output=True, text=True, encoding='cp866')
        print(f"Ping result for {ip}:\n{result.stdout}")  # Отладочная информация

        # Проверка успешности выполнения команды
        if result.returncode == 0:
            # Поиск строки с временем отклика
            match = re.search(r'время=(\d+)', result.stdout)
            if match:
                time = int(match.group(1))
                if time >= 135:
                    with open(temp_file, 'a') as f:
                        f.write(f"{time} - {ip}\n")
                    with open(high_ping_file, 'a') as f:
                        f.write(f"{ip}\n")
                return time, ip
        else:
            with open(temp_file, 'a') as f:
                f.write(f"99999 - {ip} is down\n")
            return None, ip
    except Exception as e:
        print(f"Exception while pinging {ip}: {e}")
        with open(temp_file, 'a') as f:
            f.write(f"99999 - {ip} is down\n")
        return None, ip

def process_pings():
    # Создание пустого файла для записи IP-адресов с высоким пингом
    open(high_ping_file, 'w').close()
    
    # Пингование IP-адресов с использованием многопоточности
    with concurrent.futures.ThreadPoolExecutor(max_workers=50) as executor:  # Уменьшите количество потоков при необходимости
        futures = [executor.submit(ping, ip) for ip in ip_list]
        for future in concurrent.futures.as_completed(futures):
            try:
                result = future.result()
                if result:
                    time, ip = result
                    if time is not None:
                        print(f"{time} - {ip}")
                    else:
                        print(f"99999 - {ip} is down")
            except Exception as e:
                print(f"Error in future result: {e}")

    # Сортировка результатов
    with open(temp_file, 'r') as f:
        lines = f.readlines()
    
    # Удаление пустых строк и строк с неправильным форматом
    lines = [line for line in lines if line.strip() and re.match(r'^\d+ -', line)]
    
    lines.sort(key=lambda x: int(x.split()[0]), reverse=True)
    
    with open(sorted_file, 'w') as f:
        f.writelines(lines)
    
    # Запись отсортированных результатов в финальный файл
    with open(sorted_file, 'r') as f:
        lines = f.readlines()
    
    with open(output_file, 'w') as f:
        for line in lines:
            parts = line.split()
            if len(parts) >= 3 and parts[0] != "99999":
                f.write(f"{parts[2]} = {parts[0]}\n")
            elif len(parts) >= 3:
                f.write(f"{parts[2]} is down\n")

    # Создание правила блокировки в Windows Firewall для всех IP-адресов с высоким пингом
    with open(high_ping_file, 'r') as f:
        high_ping_ips = f.read().strip().split('\n')
    
    if high_ping_ips:
        chunk_size = 200
        chunks = [high_ping_ips[i:i + chunk_size] for i in range(0, len(high_ping_ips), chunk_size)]
        rule_number = 1
        for chunk in chunks:
            ips = ','.join(chunk)
            rule_name = f"ApexLegendsHighPingServers_{rule_number}"
            try:
                subprocess.run(f'netsh advfirewall firewall add rule name="{rule_name}" dir=out action=block remoteip={ips} enable=yes', shell=True, check=True)
                subprocess.run(f'netsh advfirewall firewall add rule name="{rule_name}" dir=in action=block remoteip={ips} enable=yes', shell=True, check=True)
            except subprocess.CalledProcessError as e:
                print(f"Error creating firewall rule {rule_name}: {e}")
            rule_number += 1
        print(f"Создано {rule_number - 1} правил(о) брандмауэра для блокировки трафика к серверам с высоким пингом.")
    else:
        print("Не найдено серверов с высоким пингом для блокировки.")

if __name__ == "__main__":
    process_pings()
